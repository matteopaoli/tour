import { GetServerSidePropsResult, NextPageContext } from "next"
import Head from "next/head"
import SearchResults from "../components/search-results"
import SearchFormOneLine from "../components/search-form/search-form-one-line"
import useSearchStore from "../stores/search.store"
import { FormEvent, useState } from "react"
import { motion } from 'framer-motion'
import fetchTrips from "../lib/client/fetch-trips"
import { Trip } from "../types"
import { searchTrips } from "./api/search"

interface TripPageProps {
  results: Trip[]
}

export default function TripPage({ results }: TripPageProps): JSX.Element {
  const search = useSearchStore()
  const [searchResults, setSearchResults] = useState<Trip[]>(results)

  const onSubmit = async (e: FormEvent<HTMLFormElement>): Promise<void> => {
    e.preventDefault()
    setSearchResults(await fetchTrips(search))
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        <div className="p-2">
          <SearchFormOneLine onSubmit={onSubmit} />
          <div className="columns is-centered">
            <div className="column is-8">
            <motion.div
              initial={{ x: 300, opacity: 0 }}
              animate={{ x: 0, opacity: 1 }}
              exit={{ x: 300, opacity: 0 }}
              key="trips"
              transition={{
                type: "spring",
                stiffness: 260,
                damping: 20,
              }}
            >
              <SearchResults 
                trips={searchResults} 
              />
            </motion.div>
            </div>
          </div>
      </div>
    </>
  )
}

export const getServerSideProps = async (context: NextPageContext): Promise<GetServerSidePropsResult<TripPageProps>> => {
  const { departure, destination, date, quantity } = context.query
  if (departure && destination && date && quantity) {
    const trips = await searchTrips(departure.toString(), destination.toString(), date.toString(), +quantity)
    return {
      props: {
        results: JSON.parse(JSON.stringify(trips)) as Trip[]
      }
    }     
  }
  return {
    notFound: true
  }

}